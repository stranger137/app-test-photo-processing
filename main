# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/ebak/Desktop/OrangeG.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets


list_of_phrases=['Я часто не могу сконцентрироваться и завершить начатое.','Я часто теряю вещи, \nпотому что забыл(-а), где я их оставил(-а).','Я постоянно летаю в облаках.','Когда у меня плохое настроение,\n я чувствую, будто я тону, \nпока не достану до самого дна.','Я не радуюсь, когда со мной случается что-то хорошее. \nЯ чувствую, что я не заслуживаю быть счастливым(-ой).','Я часто думаю, что общение с другими людьми \nприносит мне больше отрицательных эмоций, чем положительных.','Я очень редко чему-то радуюсь и даже не могу представить,\n что бы могло принести мне радость.','Большую часть моей жизни я грущу.','Я часто следую своим прихотям,\n не задумываясь о негативных последствиях моих действий.','Иногда мне кажется, что у меня так много энергии, \nчто я даже раздражаю и изматываю других.','Мои мысли переключаются с одной темы на другую\n без всякой логической последовательности или контроля.',
'Когда в компании становится совсем скучно, \nя просто обязан(-а) что-то предпринять, \nчтобы подбодрить и развеселить других.','Я говорю и думаю быстрее других.','Я постоянно волнуюсь о чем-то.','Мне некомфортно рядом с незнакомцами, \nи я даже иногда представляю,\n что они могут мне навредить.','Мне легче принимать серьезные решения, \nкогда другие предложат свой план действий \nи я могу ему следовать.','Лишь одна мысль, что у меня может не быть никого, \nкто обо мне бы заботился, серьезно меня пугает.','Даже когда у меня все хорошо, \nя волнуюсь, что это ненадолго.','Сначала работа и домашние обязанности, \nзатем - хобби и развлечения.',
'Я разумно распоряжаюсь своими деньгами, \nчтобы в случае непредвиденной ситуации \nвсегда иметь деньги под рукой.',
'Я чувствую себя неуверенно, \nпока ситуация не находится под моим контролем.',
'Мне часто говорят, \nчто я очень "правильный" и уважаемый человек.','Я всегда стараюсь детально спланировать \nи организовать свою работу.','Когда меня накрывают эмоции,\n я должен(-на) побыть в одиночестве, чтобы успокоиться.','Я воспринимаю все слишком буквально, \nпоэтому часто упускаю скрытый подтекст или намерения людей.','Я никогда не замечаю саркастического тона других.','Иногда мне говорят, \nчто я даю ответы совсем не связанные с вопросом.','Я не умею интерпретировать социальные сигналы \nи предусматривать потенциальную опасность.','Иногда я думаю, что у меня есть способности, \nкоторые другие люди не способны понять.',
'Люди думают, что я говорю странные вещи.\n Я уверен(-а), что они сплетничают за моей спиной,\n обсуждая каждую мелочь, которую я сказал(-а) или сделал(-а).',
'Я склонен(-а) пробираться к потайным уголкам своего подсознания \nи размышлять на странные темы. \nЯ бы хотел(-а) избавиться от этой привычки.',
'Когда я один, мне иногда кажется, \nчто кто-то или что-то за мной наблюдает.',
'Иногда люди улыбаются мне на улице, \nи я не понимаю почему.']
list_rob=['Иногда я думаю, что у меня есть способности, \nкоторые другие люди не способны понять.',
'Люди думают, что я говорю странные вещи.\n Я уверен(-а), что они сплетничают за моей спиной,\n обсуждая каждую мелочь, которую я сказал(-а) или сделал(-а).',
'Я склонен(-а) пробираться к потайным уголкам своего подсознания \nи размышлять на странные темы. \nЯ бы хотел(-а) избавиться от этой привычки.',
'Когда я один, мне иногда кажется, \nчто кто-то или что-то за мной наблюдает.',
'Иногда люди улыбаются мне на улице, \nи я не понимаю почему.']
list_puh=['Я часто не могу сконцентрироваться и завершить начатое.','Я часто теряю вещи, \nпотому что забыл(-а), где я их оставил(-а).','Я постоянно летаю в облаках.']
list_ia=['Когда у меня плохое настроение,\n я чувствую, будто я тону, \nпока не достану до самого дна.','Я не радуюсь, когда со мной случается что-то хорошее. \nЯ чувствую, что я не заслуживаю быть счастливым(-ой).','Я часто думаю, что общение с другими людьми \nприносит мне больше отрицательных эмоций, чем положительных.','Я очень редко чему-то радуюсь и даже не могу представить,\n что бы могло принести мне радость.','Большую часть моей жизни я грущу.']
list_tig=['Иногда мне кажется, что у меня так много энергии, \nчто я даже раздражаю и изматываю других.',
'Когда в компании становится совсем скучно, \nя просто обязан(-а) что-то предпринять, \nчтобы подбодрить и развеселить других.','Я говорю и думаю быстрее других.']
list_pig=['Я постоянно волнуюсь о чем-то.','Мне некомфортно рядом с незнакомцами, \nи я даже иногда представляю,\n что они могут мне навредить.','Мне легче принимать серьезные решения, \nкогда другие предложат свой план действий \nи я могу ему следовать.','Лишь одна мысль, что у меня может не быть никого, \nкто обо мне бы заботился, серьезно меня пугает.','Даже когда у меня все хорошо, \nя волнуюсь, что это ненадолго.']
list_rab=['Сначала работа и домашние обязанности, \nзатем - хобби и развлечения.',
'Я разумно распоряжаюсь своими деньгами, \nчтобы в случае непредвиденной ситуации \nвсегда иметь деньги под рукой.',
'Я чувствую себя неуверенно, \nпока ситуация не находится под моим контролем.',
'Мне часто говорят, \nчто я очень "правильный" и уважаемый человек.','Я всегда стараюсь детально спланировать \nи организовать свою работу.']
list_ru=['Когда меня накрывают эмоции,\n я должен(-на) побыть в одиночестве, чтобы успокоиться.','Я воспринимаю все слишком буквально, \nпоэтому часто упускаю скрытый подтекст или намерения людей.','Я никогда не замечаю саркастического тона других.','Иногда мне говорят, \nчто я даю ответы совсем не связанные с вопросом.','Я не умею интерпретировать социальные сигналы \nи предусматривать потенциальную опасность.']
list_puhtig=['Я часто следую своим прихотям,\n не задумываясь о негативных последствиях моих действий.','Мои мысли переключаются с одной темы на другую\n без всякой логической последовательности или контроля.']
class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.rate_puh = 50
        self.rate_tig = 50
        self.rate_ia = 50
        self.rate_rob = 50
        self.rate_rab = 50
        self.rate_ru = 50
        self.rate_pig = 50
        self.list_of_values = []
        self.n = 0
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 650)
        MainWindow.setStyleSheet("background-color:rgb(71, 71, 71);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.next_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(405, 460, 150, 111))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.next_button.setFont(font)
        self.next_button.setStyleSheet(" QPushButton {\n"
"    background-color: rgb(239, 150, 9);\n"
"border-radius:10px;\n"
" }\n"
"\n"
" QPushButton:pressed {\n"
"     background-color: rgb(225, 117, 0);\n"
" }\n"
"\n"
"\n"
"\n"
"\n"
"")
        self.next_button.setObjectName("next_button")

        self.next_button.clicked.connect(self.next_fun)


        self.phrase = QtWidgets.QLabel(self.centralwidget)
        self.phrase.setEnabled(True)
        self.phrase.setGeometry(QtCore.QRect(50, 135, 700, 181))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.phrase.setFont(font)
        self.phrase.setAutoFillBackground(False)
        self.phrase.setStyleSheet("background-color: rgb(239, 150, 9);\n"
"border-radius:10px")
        self.phrase.setAlignment(QtCore.Qt.AlignCenter)
        self.phrase.setObjectName("phrase")
        self.choose = QtWidgets.QSlider(self.centralwidget)
        self.choose.setMinimum(-3)
        self.choose.setMaximum(3)
        self.choose.setValue(0)
        self.choose.setTickInterval(1)
        self.choose.setGeometry(QtCore.QRect(180, 360, 401, 41))
        self.choose.setStyleSheet("background-color:rgb(239, 150, 9);\n"
"border-radius:10px")
        self.choose.setOrientation(QtCore.Qt.Horizontal)
        self.choose.setObjectName("choose")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 10, 800, 51))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("background-color:  rgb(239, 150, 9);")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.disagree = QtWidgets.QLabel(self.centralwidget)
        self.disagree.setGeometry(QtCore.QRect(50, 400, 100, 60))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setBold(True)
        font.setWeight(75)
        self.disagree.setFont(font)
        self.disagree.setStyleSheet("background-color:  rgb(239, 150, 9);\n"
"border-radius:10px;")
        self.disagree.setAlignment(QtCore.Qt.AlignCenter)
        self.disagree.setObjectName("disagree")
        self.agree = QtWidgets.QLabel(self.centralwidget)
        self.agree.setGeometry(QtCore.QRect(650, 400, 100, 60))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setBold(True)
        font.setWeight(75)
        self.agree.setFont(font)
        self.agree.setStyleSheet("background-color : rgb(239, 150, 9);\n"
"border-radius:10px;")
        self.agree.setAlignment(QtCore.Qt.AlignCenter)
        self.agree.setObjectName("agree")
        self.back_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_button.setGeometry(QtCore.QRect(245, 460, 150, 111))
        font = QtGui.QFont()
        font.setFamily("PT Mono")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.back_button.setFont(font)
        self.back_button.setStyleSheet(" QPushButton {\n"
"    background-color: rgb(239, 150, 9);\n"
"border-radius:10px;\n"
" }\n"
"\n"
" QPushButton:pressed {\n"
"     background-color: rgb(225, 117, 0);\n"
" }\n"
"")
        self.back_button.setObjectName("back_button")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.next_button.setText(_translate("MainWindow", "Дальше"))
        self.phrase.setText(_translate("MainWindow",list_of_phrases[0]))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Тест"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Редактор"))
        self.disagree.setText(_translate("MainWindow", "Не согласен"))
        self.agree.setText(_translate("MainWindow", "Согласен"))
        self.back_button.setText(_translate("MainWindow", "Назад"))
        self.back_button.clicked.connect(self.back_fun)

    def pointer(self,vall,index):
        if len(self.list_of_values)-1>=index :
            if list_of_phrases[index] in list_puh:
                self.rate_puh += vall * 3
                self.rate_puh -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_tig:
                self.rate_tig += vall * 3
                self.rate_tig -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_ru:
                self.rate_ru += vall * 3
                self.rate_ru -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_rab:
                self.rate_rab += vall * 3
                self.rate_rab -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_rob:
                self.rate_rob += vall * 3
                self.rate_rob -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_pig:
                self.rate_pig += vall * 3
                self.rate_pig -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_ia:
                self.rate_ia += vall * 3
                self.rate_ia -= self.list_of_values[index]* 3
            if list_of_phrases[index] in list_puhtig:
                self.rate_puh += vall * 3
                self.rate_tig += vall * 3
                self.rate_puh -= self.list_of_values[index]* 3
                self.rate_tig -= self.list_of_values[index]* 3
            self.list_of_values[index] = vall
        else:
            if list_of_phrases[index] in list_puh:
                self.rate_puh+=vall*3
            if list_of_phrases[index] in list_tig:
                self.rate_tig+=vall*3
            if list_of_phrases[index] in list_ru:
                self.rate_ru+=vall*3
            if list_of_phrases[index] in list_rab:
                self.rate_rab+=vall*3
            if list_of_phrases[index] in list_rob:
                self.rate_rob+=vall*3
            if list_of_phrases[index] in list_pig:
                self.rate_pig+=vall*3
            if list_of_phrases[index] in list_ia:
                self.rate_ia+=vall*3
            if list_of_phrases[index] in list_puhtig:
                self.rate_puh+=vall*3
                self.rate_tig+=vall*3
            self.list_of_values.append(vall)
        print("hi","Список значений:",self.list_of_values,"Пух:",self.rate_puh,"Робин:",self.rate_rob,"Тигра:",self.rate_tig,"Крошка Ру:",self.rate_ru,"Иа:",self.rate_ia,"Кролик:",self.rate_rab,"Пятачок:",self.rate_pig)

    def next_fun(self):
        self.pointer(self.choose.value(), self.n)
        self.n += 1
        self.phrase.setText(list_of_phrases[self.n])
        if len(self.list_of_values)-1>=self.n:
            self.choose.setValue(self.list_of_values[self.n])
        else:
            self.choose.setValue(0)




    def back_fun(self):
        if self.n==0:
            pass
        else:
            self.n -= 1
            self.phrase.setText(list_of_phrases[self.n])
            self.choose.setValue(self.list_of_values[self.n])





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
